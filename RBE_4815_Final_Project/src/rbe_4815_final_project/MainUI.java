/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rbe_4815_final_project;

import java.awt.Rectangle;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

/**
 *
 * @author motmo
 */
public class MainUI extends javax.swing.JFrame implements WindowListener{

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        canvas_PaintJPanel.addPropertyChangeListener(new PropertyChangeListener(){
                 @Override
                 public void propertyChange(PropertyChangeEvent event) {
                     String property = event.getPropertyName();
                     if ("isValidPath".equals(property)) {
                         valid_jCheckBox.setSelected((boolean)event.getNewValue());
                        }
                     else if ("remainingDominoes".equals(property)) {
                         int remainingDominoes = canvas_PaintJPanel.getRemainingDominoes();
                         remainingDominoes_jSpinner.setValue((Integer) remainingDominoes);
                     }
                 }
                });
        tcpServer = new TCPServer();
        System.setOut(new PrintStreamCapturer(output_jTextPane, System.out));
        System.setErr(new PrintStreamCapturer(output_jTextPane, System.err, "[ERROR] "));
        System.out.println("Click New Path then begin drawing");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        canvas_PaintJPanel = new rbe_4815_final_project.PaintJPanel();
        menu_jPanel = new javax.swing.JPanel();
        new_path_jButton = new javax.swing.JButton();
        save_path_jButton = new javax.swing.JButton();
        load_path_jButton = new javax.swing.JButton();
        connect_jButton = new javax.swing.JButton();
        run_jButton = new javax.swing.JButton();
        valid_jCheckBox = new javax.swing.JCheckBox();
        remainingDominoes_jSpinner = new javax.swing.JSpinner();
        remainingDominoes_jLabel = new javax.swing.JLabel();
        menu_jLabel2 = new javax.swing.JLabel();
        output_jScrollPane = new javax.swing.JScrollPane();
        output_jTextPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1280, 720));
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        canvas_PaintJPanel.setPreferredSize(new java.awt.Dimension(1000, 1000));

        javax.swing.GroupLayout canvas_PaintJPanelLayout = new javax.swing.GroupLayout(canvas_PaintJPanel);
        canvas_PaintJPanel.setLayout(canvas_PaintJPanelLayout);
        canvas_PaintJPanelLayout.setHorizontalGroup(
            canvas_PaintJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvas_PaintJPanelLayout.setVerticalGroup(
            canvas_PaintJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 60.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 20);
        getContentPane().add(canvas_PaintJPanel, gridBagConstraints);

        menu_jPanel.setBackground(new java.awt.Color(51, 51, 51));
        menu_jPanel.setLayout(new java.awt.GridBagLayout());

        new_path_jButton.setBackground(new java.awt.Color(51, 152, 220));
        new_path_jButton.setText("New Path");
        new_path_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_path_jButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        menu_jPanel.add(new_path_jButton, gridBagConstraints);

        save_path_jButton.setBackground(new java.awt.Color(51, 152, 220));
        save_path_jButton.setText("Save Path");
        save_path_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_path_jButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        menu_jPanel.add(save_path_jButton, gridBagConstraints);

        load_path_jButton.setBackground(new java.awt.Color(51, 152, 220));
        load_path_jButton.setText("Load Path");
        load_path_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_path_jButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        menu_jPanel.add(load_path_jButton, gridBagConstraints);

        connect_jButton.setBackground(new java.awt.Color(51, 152, 220));
        connect_jButton.setText("Connect");
        connect_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect_jButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        menu_jPanel.add(connect_jButton, gridBagConstraints);

        run_jButton.setBackground(new java.awt.Color(51, 152, 220));
        run_jButton.setText("Run");
        run_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                run_jButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        menu_jPanel.add(run_jButton, gridBagConstraints);

        valid_jCheckBox.setBackground(new java.awt.Color(51, 51, 51));
        valid_jCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        valid_jCheckBox.setSelected(true);
        valid_jCheckBox.setText("Valid");
        valid_jCheckBox.setToolTipText("");
        valid_jCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valid_jCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        menu_jPanel.add(valid_jCheckBox, gridBagConstraints);

        remainingDominoes_jSpinner.setValue(120);
        remainingDominoes_jSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                remainingDominoes_jSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        menu_jPanel.add(remainingDominoes_jSpinner, gridBagConstraints);

        remainingDominoes_jLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        remainingDominoes_jLabel.setForeground(new java.awt.Color(255, 255, 255));
        remainingDominoes_jLabel.setText("Remaining Dominoes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        menu_jPanel.add(remainingDominoes_jLabel, gridBagConstraints);

        menu_jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        menu_jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        menu_jLabel2.setText("Menu");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        menu_jPanel.add(menu_jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        getContentPane().add(menu_jPanel, gridBagConstraints);

        output_jScrollPane.setPreferredSize(new java.awt.Dimension(102, 302));

        output_jTextPane.setPreferredSize(new java.awt.Dimension(100, 100));
        output_jScrollPane.setViewportView(output_jTextPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 20);
        getContentPane().add(output_jScrollPane, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void save_path_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_path_jButtonActionPerformed
        LinkedList<Domino> pathDominoes = this.canvas_PaintJPanel.getDominoes();
        JFileChooser dirChooser = new JFileChooser();
        //dirChooser
        //dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        Integer opt = dirChooser.showSaveDialog(this);
        if (opt == JFileChooser.APPROVE_OPTION) {
            File pathFile = dirChooser.getSelectedFile();
            try (FileOutputStream outStream = new FileOutputStream(pathFile, false)) // try with outstream
            {
                String lines = canvas_PaintJPanel.PIXELS_PER_MM + "\n";
                for(Domino d : pathDominoes) {
                    int x = d.getPosition().x;
                    int y = d.getPosition().y;
                    double angle = d.getOrientation();
                    lines = lines.concat(x + ", " + y + ", " + angle + "\n");
                    
                }
                outStream.write(lines.getBytes());
                outStream.close();
            }
            catch (Exception e){
            }
        }
    }//GEN-LAST:event_save_path_jButtonActionPerformed

    private void new_path_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_path_jButtonActionPerformed
        this.canvas_PaintJPanel.resetPath();
    }//GEN-LAST:event_new_path_jButtonActionPerformed

    private void run_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_run_jButtonActionPerformed
        if(!tcpServer.isConnected()){
            System.out.println("No connection established");
            return;
        }
        if (canvas_PaintJPanel.getDominoes().size() <= 0){
            System.out.println("No dominoes to transmit");
            return;
        }
        System.out.println("Sending Domino Data");
        LinkedList<Domino> pathDominoes = this.canvas_PaintJPanel.getDominoes();
        tcpServer.writeString("PATH_START");
        
        //sleepThread(1000);
        
        tcpServer.writeString(Integer.toString((int)canvas_PaintJPanel.pixelToMM(canvas_PaintJPanel.getWidth())));
        int widthMM = (int)canvas_PaintJPanel.pixelToMM(canvas_PaintJPanel.getWidth());
        //sleepThread(1000);
        for(Domino d : pathDominoes) {
//            int x = d.getPosition().y;
//            int y =  -(widthMM - d.getPosition().x);
            int x = d.getPosition().x;
            int y = d.getPosition().y;

            int angle = (int) d.getOrientation();
            String domino_data = x + "," + y + "," + angle;
            
            tcpServer.writeString(domino_data);
            //sleepThread(1000);
        }
        //tcpServer.writeString("PATH_END");
        System.out.println("Data Sent");
    }//GEN-LAST:event_run_jButtonActionPerformed

    private void connect_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect_jButtonActionPerformed
        System.out.println("Waiting for connection on socket " + SOCKET_NUMBER);
        
        tcpServer.openSocket(SOCKET_NUMBER, TCP_TIMEOUT_MS);
        if (tcpServer.isConnected()) {
            System.out.println("Client connected");
        }
        else {
            System.out.println("Client connection failed on socket " + SOCKET_NUMBER);
        }
    }//GEN-LAST:event_connect_jButtonActionPerformed

    private void valid_jCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valid_jCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valid_jCheckBoxActionPerformed
  
    private void load_path_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_path_jButtonActionPerformed
        JFileChooser dirChooser = new JFileChooser();
        //dirChooser
        //dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        Integer opt = dirChooser.showOpenDialog(this);
        if (opt == JFileChooser.APPROVE_OPTION) {
            File pathFile = dirChooser.getSelectedFile();
           
            BufferedReader br = null;

            LinkedList<Domino> dominoQueue = new LinkedList<Domino>();
            try {

                String line;
             
                br = new BufferedReader(new FileReader(pathFile));
                line = br.readLine();
                canvas_PaintJPanel.PIXELS_PER_MM = Double.parseDouble(line);
                while ((line = br.readLine()) != null) {
                    String[] elementArray = line.split(",");
                    int x = Integer.parseInt(elementArray[0].trim());
                    int y = Integer.parseInt(elementArray[1].trim());
                    double angle = Double.parseDouble(elementArray[2].trim());
                    dominoQueue.add(new Domino(x,y,angle));
                }
                canvas_PaintJPanel.resetPath();
                canvas_PaintJPanel.setDominoes(dominoQueue);
                canvas_PaintJPanel.drawPath();

            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                        if (br != null)br.close();
                } catch (IOException ex) {
                        ex.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_load_path_jButtonActionPerformed

    private void remainingDominoes_jSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_remainingDominoes_jSpinnerStateChanged

        int remainingDominoes = (int) remainingDominoes_jSpinner.getValue();
        canvas_PaintJPanel.setRemainingDominoes(remainingDominoes, false);
    }//GEN-LAST:event_remainingDominoes_jSpinnerStateChanged

    private void sleepThread(int ms){
        try{
            Thread.sleep(ms);
        } catch (Exception e){
            System.out.println("Sleep Interupted");
        }
        
    }
    
    
    @Override
    public void windowClosing(java.awt.event.WindowEvent windowEvent) {
        if (tcpServer != null) {
            tcpServer.closeSocket();
        }
    }
    
    @Override
    public void windowOpened(WindowEvent e){}
    @Override
    public void windowClosed(WindowEvent e){}
    @Override
    public void windowIconified(WindowEvent e){}
    @Override
    public void windowDeiconified(WindowEvent e){}
    @Override
    public void windowActivated(WindowEvent e){}
    @Override
    public void windowDeactivated(WindowEvent e){}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rbe_4815_final_project.PaintJPanel canvas_PaintJPanel;
    private javax.swing.JButton connect_jButton;
    private javax.swing.JButton load_path_jButton;
    private javax.swing.JLabel menu_jLabel2;
    private javax.swing.JPanel menu_jPanel;
    private javax.swing.JButton new_path_jButton;
    private javax.swing.JScrollPane output_jScrollPane;
    private javax.swing.JTextPane output_jTextPane;
    private javax.swing.JLabel remainingDominoes_jLabel;
    private javax.swing.JSpinner remainingDominoes_jSpinner;
    private javax.swing.JButton run_jButton;
    private javax.swing.JButton save_path_jButton;
    private javax.swing.JCheckBox valid_jCheckBox;
    // End of variables declaration//GEN-END:variables
    private TCPServer tcpServer;
    private static final int SOCKET_NUMBER = 4024;
    private static final int TCP_TIMEOUT_MS = 30000;
}
